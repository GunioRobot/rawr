#! /usr/bin/env ruby

# rawr package -f config_file
# rawr packaage <build_configuration.yaml>

require 'fileutils'
require 'rubygems'
require 'rawr_version'

def help(message = nil)
  puts message + "\\\n-----------------------------------\\\n" unless message.nil?
  puts <<-ENDL
  Usage:
      rawr -h/--help
      rawr -v/--version
      rawr command [options]
      
  Commands:
      install [-d dir] [-c class_name]
        -d/--directory: Directory to place Java main file in, defaults to 'src'
        -c/--class: Name of Java class (with package) to generate, defaults to org.rubyforge.rawr.Main
        -f/--file: Name of the rawr configuration file, defaults to build_configuration.yaml
        
        Installs a main class file and app configuration file into your project.  Also creates a default Rakefile if none exists.
  ENDL
end

def create_config_file(config_file, java_class)
  if File.exist? config_file.join("/")
    puts "Configuration file '#{config_file.join("/")}' exists, skipping"
  else
    puts "Creating rawr configuration file #{config_file.join("/")}"
    FileUtils.mkdir_p(config_file[0...-1].join("/"))

    f = File.new(config_file.join("/"), "w+")
    f << <<-ENDL
      # Name of the created jar file
      project_name: change_me

      # Directory to create and place produced project files in
      output_dir: package

      # File to set as main-class in jar manifest
      main_java_file: #{java_class.join(".")}

      # Ruby file to invoke when jar is started
      main_ruby_file: main

      # Location of Ruby source files
      ruby_source_dir: src

      # Location of Java source files
      java_source_dir: src

      # Directories that should have ALL their .jar contents loaded on the classpath
      # If you wish to only include specific jars from a directory use classpath_files
      classpath_dirs:
         - lib

      # Individual files that should be loaded on the classpath
      #classpath_files:
      #    - lib/jruby-complete.jar
      #    - lib/swing-layout-1.0.2.jar

      # Directory that should be loaded onto the java.library.path 
      #native_library_dirs:
      #    - lib/native

      # Directories which you want the coentents of to be copied to the output directory
      package_data_dirs:
          - lib

      # Directories to be added into the jar
      #jar_data_dirs:
      #    - data

      # NOT YET IMPLEMENTED
      #pre_processing_task:
      #post_processing_task:
    ENDL
  end
end

def create_main_file(directory, java_class)
  resolved_package = java_class[0...-1].join(".")
  resolved_dir = File.expand_path("#{directory}/#{java_class[0...-1].join('/')}")
  resolved_file = "#{resolved_dir}/#{java_class.last}.java"
  if File.exist? resolved_file
    puts "Java class '#{resolved_file}' exists, skipping"
  else
    puts "Creating Java class #{resolved_file}"
    FileUtils.mkdir_p(resolved_dir)

    f = File.new(resolved_file, "w+")
    f << <<-ENDL
package #{resolved_package};

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;


import java.util.ArrayList;
import org.jruby.Ruby;
import org.jruby.javasupport.JavaEmbedUtils;


    public class #{java_class.last}
{
	public static void main(String[] args) throws Exception
	{   
		Ruby runtime = JavaEmbedUtils.initialize(new ArrayList(0));
		String config_yaml = "";
		try{
			java.io.InputStream ins = Main.class.getClassLoader().getResourceAsStream("run_configuration");
       if (ins == null ) {
          System.err.println( "InputStream ins is null!");
      }
    else {
      
			config_yaml = grabConfigFileContents(ins);
    }
		}
		catch(IOException e)
		{
			System.err.println("Error loading run configuration file 'run_configuration', using configuration defaults: " + e);
			config_yaml = "";
		}
		catch(java.lang.NullPointerException ee)
		{
			System.err.println("Error loading run configuration file 'run_configuration', using configuration defaults: " + ee );
			config_yaml = "";
		}

		String bootRuby = "require 'java'\\n" + 
			"require 'yaml'\\n" + 
			"$: << 'src'\\n" + 
			"yaml = '" + config_yaml + "' \\n" +
			"begin\\n" + 
			"  raise 'No YAML!' if  yaml.strip.empty?\\n" + 
			"  config_hash = YAML.load( \\"" + config_yaml + "\\" )\\n" + 
			"  $:.unshift(  config_hash['ruby_source_dir'] )\\n" + 
			"  require  config_hash[ 'ruby_source_dir' ] + '/' + config_hash[ 'main_ruby_file' ]\\n" + 
			"rescue Exception \\n" + 
			"  STDERR.puts \\"Error loading config file: \\" + $! + \\"\\nUsing default values.\\"\\n" + 
			"  begin\\n" + 
			"    require 'src/main'\\n" + 
			"  rescue LoadError => e\\n" + 
			"    warn 'Error starting the application'\\n" + 
			"    warn e\\n" + 
			"  end\\n" + 
			"end\\n";
		runtime.evalScriptlet( bootRuby );
	}

	private static String grabConfigFileContents(InputStream input) 
	throws IOException, java.lang.NullPointerException {
    
    InputStreamReader isr = new InputStreamReader(input);
   	BufferedReader reader = new BufferedReader(isr);
		String line;
		String buf;
		buf = "";
		while ((line = reader.readLine()) != null) {
			buf += line + "\\n";
		}
		reader.close();
		return(buf);
	}
}



ENDL
      end
    end

    def create_rakefile
      if File.exist? "Rakefile"
        puts "Rakefile exists, skipping"
      else
        puts "Creating Rakefile"
    f = File.new("Rakefile", "w+")
    f << "require 'rawr'\\\n"
  end
end


if ARGV.empty?
  help
else
  case ARGV[0]
  when "-h" || "--help"
    help
  when "-v" || "--version"
    puts "Rawr version #{Rawr::VERSION}"
  when "install"
    directory = "src"
    java_class = %w{org rubyforge rawr Main}
    config_file = File.expand_path("build_configuration.yaml").split("/")
    ARGV.shift
    until ARGV.empty?
      case ARGV[0]
      when "-c" || "--class"
        if ARGV[1]
          java_class = ARGV[1].split(".")
          java_class[-1].capitalize!
          ARGV.shift; ARGV.shift
        else
          help("No class file name given")
          break
        end
      when "-d" || "--directory"
        if ARGV[1]
          directory = ARGV[1]
          ARGV.shift; ARGV.shift
        else
          help("No directory name given")
          break
        end
      when "-f" || "--file"
        if ARGV[1]
          config_file = File.expand_path(ARGV[1]).split("/")
          ARGV.shift; ARGV.shift
        else
          help("No rawr configuration file name given")
        end
      end
    end
    
    create_config_file(config_file, java_class)
    create_main_file(directory, java_class)
    create_rakefile
  else
    help("Unknown command '#{ARGV[0]}'")
  end
end
