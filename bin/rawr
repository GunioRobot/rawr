#!/usr/bin/env jruby

# rawr package -f config_file
# rawr packaage <build_configuration.yaml>

require 'fileutils'
require 'rubygems'
require 'rawr_version'
require 'generator'

def help(message = nil)
  puts message + "\\\n-----------------------------------\\\n" unless message.nil?
  puts <<-ENDL
  Usage:
      rawr -h/--help
      rawr -v/--version
      rawr command [options]

  Commands:
      install [-d dir] [-c class_name]
        -d/--directory: Directory to place Java main file in, defaults to 'src'
        -c/--class: Name of Java class (with package) to generate, defaults to org.rubyforge.rawr.Main
        -f/--file: Name of the rawr configuration file, defaults to build_configuration.yaml

        Installs a main class file and app configuration file into your project.  Also creates a default Rakefile if none exists.
  ENDL
end

def create_rakefile
  if File.exist? "Rakefile"
    handle_existing_rakefile

  else
    create_new_rakefile
  end
end

def quit_and_do_nothing_with_rakefile 
  puts "rawr will now exit, and leave your Rakefile as-is."
end

def prepend_to_current_rakefile
  puts "rawr will now prepend new rawr task content to your current Rakefile ..."
  current = IO.read( 'Rakefile')
  File.open("Rakefile", "w") do |rakefile|
    rakefile.puts "require 'rawr'\n"
    rakefile.puts current
  end
end

def replace_with_new_rakefile
  puts "rawr will now replace your current Rakefile with a new one ..."
  create_new_rakefile
end

def create_new_rakefile
  puts "Creating Rakefile ..."
  File.open("Rakefile", "w") do |rakefile|
    rakefile.puts "require 'rawr'\n"
  end
end



def handle_existing_rakefile
  options = { '1' => ['Replace the current Rakefile with a new Rakefile.  You will lose everything in the current Rakefile!', :replace_with_new_rakefile ],
              '2' => ['Keep the current Rakefile, and add the rawr content to the top.', :prepend_to_current_rakefile ],
              '3' => ['Quit, leave the current Rakefile alone, and add nothing new.', :quit_and_do_nothing_with_rakefile ] 

  }
  choice = ''
  puts "rawr has found an exisiting Rakefile.\nPlease select one of these options:\n"
  puts "\t1: #{options['1'].first }" 
  puts "\t2: #{options['2'].first }"  
  puts "\t3: #{options['3'].first }"  

  while choice.to_s.strip !~ /[123]/
    print "\nYour choice (1,2, or 3): "
    choice = gets.to_s.strip[0..0]
  end
  puts "You choose #{choice}!"
  send options[choice].last
end


if ARGV.empty?
  help
else
  case ARGV[0]
  when "-h" || "--help"
    help
  when "-v" || "--version"
    puts "Rawr version #{Rawr::VERSION}"
  when "install"
    directory = "src"
    java_class = %w{org rubyforge rawr Main}
    config_file = File.expand_path("build_configuration.yaml").split("/")
    ARGV.shift
    until ARGV.empty?
      case ARGV[0]
      when "-c" || "--class"
        if ARGV[1]
          java_class = ARGV[1].split(".")
          java_class[-1].capitalize!
          ARGV.shift; ARGV.shift
        else
          help("No class file name given")
          break
        end
      when "-d" || "--directory"
        if ARGV[1]
          directory = ARGV[1]
          ARGV.shift; ARGV.shift
        else
          help("No directory name given")
          break
        end
      when "-f" || "--file"
        if ARGV[1]
          config_file = File.expand_path(ARGV[1]).split("/")
          ARGV.shift; ARGV.shift
        else
          help("No rawr configuration file name given")
        end
      end
    end

    if File.exist? config_file.join("/")
      puts "Configuration file '#{config_file.join("/")}' exists, skipping"
    else
      puts "Creating rawr configuration file #{config_file.join("/")}"
      FileUtils.mkdir_p(config_file[0...-1].join("/"))
      Rawr::Generator.create_default_config_file(config_file.join("/"), java_class.join("."))
    end
    
    resolved_package = java_class[0...-1].join(".")
    resolved_dir = File.expand_path("#{directory}/#{java_class[0...-1].join('/')}")
    resolved_file = "#{resolved_dir}/#{java_class.last}.java"
    if File.exist? resolved_file
      puts "Java class '#{resolved_file}' exists, skipping"
    else
      puts "Creating Java class #{resolved_file}"
      FileUtils.mkdir_p(resolved_dir)
      Rawr::Generator.create_java_main_file(resolved_file, resolved_package, java_class.last)
    end
    
    create_rakefile
  else
    help("Unknown command '#{ARGV[0]}'")
  end
end
